# 🐠 Goldfish MCP - AI Agent Behavioral Guidance

## CRITICAL: Use Goldfish Tools PROACTIVELY for Organized Development

### 🎯 **ALWAYS START WITH A PLAN + CODE ANALYSIS**
**Before writing ANY code, create a plan AND analyze the codebase:**
- Use `mcp__goldfish__plan` with `action="save"` to create strategic plans
- **COMBINE with CodeSearch analysis**: Use `mcp__codesearch__text_search` to find existing patterns
- **VERIFY types first**: Use `mcp__codesearch__goto_definition` to understand dependencies
- Plans should include: technical approach, key milestones, potential risks, **existing code patterns**
- **NO CODING without an active plan AND type verification** - prevents both scope creep and compilation errors

**Example Integrated Workflow:**
```
User: "Add authentication to the API"
✅ CORRECT: 
   1. Create plan with `mcp__goldfish__plan`
   2. Search existing auth patterns with `mcp__codesearch__text_search`
   3. Verify types with `mcp__codesearch__goto_definition`
   4. Generate todos from plan
   5. Checkpoint before starting
   6. Implement with precision using CodeSearch tools
   7. Update todos and final checkpoint

❌ WRONG: Jump straight into coding without planning OR type verification
```

### ✅ **MAINTAIN ACTIVE TODO LISTS**
**Break down plans into actionable tasks:**
- Use `mcp__goldfish__plan` with `action="generate-todos"` to create task lists from plans
- Use `mcp__goldfish__todo` to track implementation progress
- **Mark tasks complete as you finish them** - don't batch completions
- Only ONE active TODO list per workspace - maintains focus

**Smart Keywords Work Everywhere:**
- `listId: "latest"` - Most recently updated list
- `listId: "active"` - Current active list with pending tasks
- `planId: "active"` - Current active plan

### 💾 **CHECKPOINT FREQUENTLY WITH CODESEARCH CONTEXT**
**Save your progress and technical context:**
- Use `mcp__goldfish__checkpoint` after completing significant work
- Include active files, highlights, and next steps
- **INCLUDE CodeSearch findings**: Document which types were verified, references found
- **Essential for session continuity** - Claude Code sessions end
- Checkpoints help you resume with both workflow AND technical context intact

**When to Checkpoint:**
- After implementing a major feature
- Before taking a break or ending session
- When switching between different tasks
- After resolving complex bugs

### 📝 **DOCUMENT DECISIONS AND DISCOVERIES**
**Record important insights and choices:**
- Use `mcp__goldfish__chronicle` to log key decisions made during development
- Record why you chose specific approaches or patterns
- **Prevents repeating analysis** in future sessions
- Types: Decision, Milestone, Issue, Resolution, Discovery, Note

### 🧠 **RESTORE CONTEXT EFFICIENTLY**
**When resuming work or need context:**
- Use `mcp__goldfish__recall` to quickly restore recent work context
- Searches across plans, todos, checkpoints automatically
- **Use at session start** if you don't remember recent work
- Supports time ranges: "24h", "3d", "1w"

### 📊 **REGULAR PROGRESS REPORTING**
**Track progress across all work streams:**
- Use `mcp__goldfish__standup` for daily/weekly summaries
- Shows progress across plans, todos, checkpoints, and decisions
- **Perfect for status reports** and understanding current state
- Actions: "daily", "weekly", "project" for different time ranges

### 🏢 **MANAGE WORKSPACE STATE**
**Keep your workspace organized:**
- Use `mcp__goldfish__workspace` to manage active work state
- Each workspace has ONE active plan and ONE active todo list
- **Prevents context switching chaos** - maintain focus
- Actions: "list", "current", "switch", "clean", "info"

---

## 🤝 **GOLDFISH + CODESEARCH INTEGRATION**

**The Power of Combined Tools:**
Goldfish provides **workflow discipline and organization** while CodeSearch provides **technical precision and type safety**. Use them together for professional development practices.

### **Integrated Development Cycle**

{{ if enforcement_level == "strict" }}
**MANDATORY INTEGRATION - NO EXCEPTIONS:**
{{ else if enforcement_level == "guided" }}
**STRONGLY RECOMMENDED INTEGRATION:**
{{ else }}
**SUGGESTED INTEGRATION:**
{{ end }}

1. **Strategic Phase**: `mcp__goldfish__plan` + `mcp__codesearch__text_search` for pattern analysis
2. **Discovery Phase**: `mcp__codesearch__symbol_search` + `mcp__goldfish__todo` generation 
3. **Verification Phase**: `mcp__codesearch__goto_definition` + `mcp__goldfish__checkpoint`
4. **Implementation Phase**: `mcp__codesearch__find_references` + `mcp__goldfish__todo` updates
5. **Completion Phase**: `mcp__goldfish__chronicle` decisions + final `mcp__goldfish__checkpoint`

### **Why This Integration Works**
- **Goldfish prevents chaos**: Keeps you organized and focused
- **CodeSearch prevents errors**: Provides accurate type information
- **Together**: Creates professional, systematic, error-free development

### **Anti-Pattern Detection**
❌ **Using only Goldfish**: Good organization but prone to type errors and compilation issues
❌ **Using only CodeSearch**: Good technical precision but poor task management and context loss
✅ **Using both together**: Professional development with organization AND technical accuracy

---

## 🔄 **RECOMMENDED WORKFLOW PATTERNS**

### Starting New Work (Integrated Approach)
1. **Plan First**: `mcp__goldfish__plan` - Create strategic approach
2. **Analyze Codebase**: `mcp__codesearch__text_search` to find existing patterns
3. **Verify Types**: `mcp__codesearch__goto_definition` for key dependencies
4. **Generate Tasks**: Use `action="generate-todos"` from plan (include type verification tasks)
5. **Checkpoint State**: Save before starting with technical context
6. **Begin Implementation**: Work through tasks with `mcp__codesearch__find_references` for safety
7. **Chronicle Decisions**: Document key choices made AND type discoveries
8. **Final Checkpoint**: Save completion state with lessons learned

### Resuming Work (Context Recovery)
1. **Recall Context**: `mcp__goldfish__recall` - What was I working on?
2. **Check Active State**: `mcp__goldfish__workspace` with `action="current"`
3. **Review Progress**: `mcp__goldfish__todo` with `listId="active"`
4. **Verify Current State**: Use `mcp__codesearch__recent_files` to see what changed
5. **Continue Implementation**: Pick up with full context (workflow + technical)

### Ending Sessions
1. **Update Progress**: Mark completed todos as done
2. **Chronicle Discoveries**: Record what you learned
3. **Checkpoint Session**: Save current state and next steps
4. **Clean Workspace**: Archive completed work if needed

---

## ⚡ **PROACTIVE USAGE PRINCIPLES**

### DO Use Goldfish When:
- ✅ Starting any coding task (create plan first)
- ✅ User asks "what was I working on?" (recall)
- ✅ Completing significant milestones (checkpoint)
- ✅ Making important technical decisions (chronicle)
- ✅ Need to break down complex tasks (plan → todos)
- ✅ Session is ending (checkpoint with next steps)

### DON'T Just:
- ❌ Jump into coding without planning
- ❌ Leave TODOs incomplete for long periods
- ❌ Forget to document important decisions
- ❌ End sessions without checkpointing
- ❌ Let workspace state become chaotic

---

## 🎯 **ENFORCEMENT LEVELS**

{{ if enforcement_level == "strict" }}
### STRICT MODE - MANDATORY COMPLIANCE
- **MUST create plan before any coding task**
- **MUST update todos as work progresses**  
- **MUST checkpoint at end of significant work**
- **MUST chronicle important technical decisions**
{{ else if enforcement_level == "guided" }}
### GUIDED MODE - STRONG RECOMMENDATIONS
- **Strongly encouraged** to create plans for complex tasks
- **Should** maintain active todo lists for organization
- **Recommended** to checkpoint frequently for continuity
- **Beneficial** to chronicle key decisions and discoveries
{{ else }}
### FLEXIBLE MODE - SUGGESTIONS ONLY
- Consider using plans for complex features
- Todo lists can help with organization
- Checkpoints are useful for session continuity
- Chronicle important insights when helpful
{{ end }}

---

## 🏆 **SUCCESS METRICS**

**You're using Goldfish effectively when:**
- Plans exist for all active development work
- TODO completion rate is high (>80%)
- Sessions can be resumed quickly with context
- Technical decisions are documented and searchable
- Workspace state remains organized and focused

**Watch out for these anti-patterns:**
- Multiple active plans competing for attention
- Stale TODO lists with incomplete tasks
- Starting coding without clear plan
- Lost context between sessions
- Undocumented technical decisions

---

*Remember: Goldfish tools work best as an integrated system. Use them together to maintain organized, focused, and well-documented development workflows.*